const enTranslation = `
CRD=CRD
K8M=K8M
k8m - AI driven k8s mini dashboard=k8m - AI driven k8s mini dashboard
索引时间=Indexed
输入仓库名称=Enter Repository Name
仓库URL=Repository URL
更新索引=Updated
Repository URL=Repository URL
CronJob=CronJob
暂停=Pause
保留策略=Retention Policy
并发策略=Concurrency Policy
最后调度=Last
调度计划=Schedule
尽力型=Best Effort
调度中=Scheduling
运行中=Running
容器网络=Network
资源用量 kubectl top pods -n xx=Resource Usage: kubectl top pods -n xx
容器组资源用量（ESC 关闭）=Pod Resource Usage (ESC Off)
cpu（核）=CPU (Core)
内存（Mi）=Memory (Mi)
展开=Expand
设定副本数=Replicas
Deployment=Deployment
新增Deployment=Add
容器=Container
Resource settings=Resource Settings
选择deployment部署的命名空间=Select Deployment Namespace
副本数量=Replicas
容器设置=Container
标签设置=Label
添加容器=Add
新增 Deployment 参数填写=Add Deployment Parameters
允许数字、字母和'-'组成，不能以'-'和数字开头，不能以'-'结尾=Allowed: numbers, letters, and '-', cannot start with '-' or a number, cannot end with '-'
建议填写version: v1,如不需要可以删除=Recommended: version: v1, remove if not needed
Pod副本的数量=Pod Replica Count
版本标签=Version Label
镜像名称=Image Name
当前运行镜像=Current Image
镜像拉取密钥=Image Pull Secret
镜像： nginx:1.19.6=Image: nginx:1.19.6
镜像拉取策略=Image Pull Policy
从不拉取=Never
始终拉取=Always
不存在时拉取=IfNotPresent
Container: =Container:
容器：=Container:
如: 500m 或 0.5=E.g.: 500m or 0.5
CPU请求=CPU Request
CPU设置=CPU Setting
CPU限制=CPU Limit
编辑资源限制=Edit Resource Limit
CPU请求/限制：未设置/100m=CPU Request/Limit: Not set/100m
内存请求=Memory Request
内存设置=Memory Setting
内存限制=Memory Limit
如: 1 或 1000m=E.g.: 1 or 1000m
容器启动时请求的内存资源=Initial Memory Request
当前容器资源=Current Container Resource
如: 1Gi 或 2Gi=E.g.: 1Gi or 2Gi
内存请求/限制：未设置/64Mi=Memory Request/Limit: Not set/64Mi
更新资源限制=Update Resource Limit
容器启动时请求的CPU资源=Initial CPU Request
容器最大可使用的CPU资源=Max CPU Limit
如: 512Mi 或 1Gi=E.g.: 512Mi or 1Gi
容器最大可使用的内存资源=Max Memory Limit
调整副本数量=Replicas
就绪检查端口号=Readiness Port
就绪检查路径，如：/ready=Readiness Path, e.g. /ready
TCP端口=TCP Port
TCP端口检查设置=TCP Port
需要检查的TCP端口号=TCP Port
添加参数=Add
执行命令设置=Command
请输入命令=Enter Command
TCP端口检查=TCP Port
执行命令=Execute Command
HTTP请求=HTTP Request
ready=Ready
副本=Replica
扩缩容=Scale
DaemonSet=DaemonSet
当前状态=Current
全选=All
local-path-storage=local-path-storage
停止=Stop
恢复=Resume
重启=Restart
滚动更新=Rolling Update
envoy=Envoy
Current status=Current Status
调整资源限制=ResourceLimit
设置环境变量=Environment
不设置=Not Set
存活探针=Liveness Probe
就绪探针=Readiness Probe
探针类型=Probe Type
健康检查配置=Health Check Setting
daemon=Daemon
协议=Protocol
新增=Add
可选的自定义HTTP头信息=Optional Custom HTTP Header
健康检查路径，如：/healthz=Health Check Path, e.g. /healthz
失败阈值=Failure Threshold
成功阈值=Success Threshold
容器启动后等待多少秒开始探测=Seconds to Wait After Container Start
初始延迟秒数=Initial Delay Seconds
超时秒数=Timeout Seconds
健康检查端口号=Health Check Port
HTTP请求设置=HTTP Request Setting
连续失败多少次标记为不健康=Unhealthy After Consecutive Failures
HTTP头信息=HTTP Header
HTTP路径=HTTP Path
通用参数设置=General Parameter Setting
检测周期秒数=Probe Period Seconds
每次探测间隔多少秒=Probe Interval Seconds
探测超时时间（秒）=Probe Timeout (Seconds)
连续成功多少次标记为健康=Healthy After Consecutive Successes
更新镜像=Update Image
查看事件   (ESC 关闭)=View Events (ESC Off)
原因=Reason
告警=Alert
说明=Description
AI问诊=AI Consultation
事件来源=Source
关联字段=Associated
容器列表=Containers
CPU资源=CPU Resource
请求用量占比=Request Percentage
内存资源=Memory Resource
保障等级=QoS
实时用量占比=Real-time Percentage
容器镜像=Container Image
实时用量=Real-time Usage
所在节点=Node
模糊标签=Fuzzy Label
容器组IP=Pod IP
精确标签=Precise Label
网络类型=Type
资源用量=Usage
资源设定=Setting
选择状态=Status
重启次数=Restart
模糊搜索label标签中的k、v=Fuzzy Search k/v in Label
选择保障等级=QoS
容器名称=>镜像:版本=Container => Image:Tag
CPU(m毫核)/内存(Mi)=CPU (millicore)/Memory (Mi)
请求<设定<上限=Request<Setting<Limit
上限用量占比=Limit Percentage
刷新=Refresh
点击选择显示列=Click to Select Columns
容器=Container
进度=Progress
容忍度=Toleration
所有者=Owner
启动时间=Started
已完成=Completed
进行中=In Progress
新增cm=Add
回调定义=Callback
kruise-mutating-webhook-configuration=Kruise Mutating Webhook Configuration
Callback definition=Callback Definition
istio-sidecar-injector=Istio Sidecar Injector
istio-revision-tag-default=Istio Revision Tag Default
SVC服务=SVC
Ingress入口类=Ingress Class
Ingress入口=Ingress
Service=Service
IP协议栈=IP Stack
外部地址=External Address
访问地址=Access Address
访问端口=Access Port
访问类型=Access Type
内部流量策略=Internal Traffic Policy
IP协议栈集=IP Stack Set
POD选择器=Selector
会话亲和性=Affinity
无=None
全局模式=Global
单栈模式=SingleStack
双栈优先=DualStackPreferred
访问端口[:节点端口]/协议 => 容器端口=AccessPort[:NodePort]/Protocol=>ContainerPort
新增svc=AddSVC
域名=DomainName
访问规则=AccessRule
入口控制器=IngressController
Ingress数量=IngressCount
控制器名称=ControllerName
存储类=StorageClass
持久卷声明=PVC
持久卷=PV
申请容量=Capacity
Persistent volumes=PersistentVolumes
Request capacity=Requested Capacity
收起=Collapse
亲和性=Affinity
卷模式=Volume Mode
PVC声明=PVC
存储容积=Storage Size
存储类名称=StorageClass Name
访问模式=Access Mode
输入PVC声明名称=Enter PVC Name
已绑定=Bound
单路读写=ReadWriteOnce
文件系统=FileSystem
state=State
Access mode=Access Mode
Affinity=Affinity
Volume mode=Volume Mode
Storage volume=Storage Volume
PVC Statement=PVC Statement
The name of the storage class=StorageClass Name
资源描述=Desc
查看事件=View Event
供应者=Provider
回收策略=Reclaim
存储卷数量=PV Count
是否默认=Default
存储卷声明数量=PVC Count
卷绑定模式=Mode
延迟绑定=Delayed Binding
standard=Standard
rancher.io/local-path=rancher.io/local-path
The number of storage volume declarations=PVC Count
Number of storage volumes=PV Count
Whether it defaults or not=Is Default
provider=Provider
Recycling policy=Reclaim Policy
Volume binding mode=Volume Binding Mode
设为默认=Set as Default
服务账户=ServiceAccount
角色绑定=RoleBinding
集群角色=ClusterRole
集群角色绑定=ClusterRoleBinding
default=Default
ClusterRole=ClusterRole
rules=Rules
kruise-webhook-role=Kruise Webhook Role
istio-ingressgateway-sds=Istio IngressGateway SDS
eg-gateway-helm-infra-manager=EG Gateway Helm Infra Manager
eg-gateway-helm-leader-election-role=EG Gateway Helm Leader Election Role
istio-egressgateway-sds=Istio EgressGateway SDS
kruise-leader-election-role=Kruise Leader Election Role
kruise-daemon-secret-role=Kruise Daemon Secret Role
eg-gateway-helm-certgen=EG Gateway Helm CertGen
ClusterRoleBinding=ClusterRoleBinding
主体=Subject
输入角色名称=Enter Role Name
输入主体名称=Enter Subject Name
租约=Lease
CSI节点=CSI Node
水平自动扩缩=HPA
优先级类=PriorityClass
流量规则=Traffic Policy
端点切片=EndpointSlice
组件状态=ComponentStatus
网络策略=NetworkPolicy
资源配额=ResourceQuota
运行时类=RuntimeClass
Pod中断配置=PDB
API 服务=API
优先级配置=Priority Configuration
就绪IP=Ready IP
未就绪IP=Not Ready IP
端口=Port
端点=Endpoint
HorizontalPodAutoscaler=HPA
指标=Metric
目标=Target
实例数=Instances
当前/预期=Current/Desired
副本数范围=Replicas
指标名称 / 阈值 / 当前值=Metric/Threshold/Current
NetworkPolicy=NetworkPolicy
ResourceQuota=ResourceQuota
规则=Rules
生效范围=Effective Scope
配额范围=Quota Scope
LimitRange=LimitRange
request=Request
limit=Limit
区间=Interval
默认值=Default
最大倍率=Max Ratio
请求限制=Request
限制范围=Limit
输入命名空间=Enter Namespace
默认请求值=Default Request Value
PodDisruptionBudget=PDB
智检=AI Inspection
Lease=Lease
策略=Policy
持续秒数=Duration (Seconds)
转换次数=Conversion Count
值=Value
抢占策略=Preemption Policy
抢占=Preempt
Preemption strategy=Preemption Policy
Yaml编辑=YAML Edit
Yaml管理=YAML Management
文档=Doc
保 存=Save
查看编辑=View/Edit
RuntimeClass=RuntimeClass
CSINode=CSINode
驱动=Driver
Duration of existence=Duration
APIService=APIService
就绪=Ready
v1beta1.security.istio.io=v1beta1.security.istio.io
v1alpha1.telemetry.istio.io=v1alpha1.telemetry.istio.io
v1beta1.networking.istio.io=v1beta1.networking.istio.io
v1alpha1.extensions.istio.io=v1alpha1.extensions.istio.io
v1alpha1.policy.networking.k8s.io=v1alpha1.policy.networking.k8s.io
v1.operator.tigera.io=v1.operator.tigera.io
v1.crd.projectcalico.org=v1.crd.projectcalico.org
v1.telemetry.istio.io=v1.telemetry.istio.io
v1.security.istio.io=v1.security.istio.io
v1alpha3.networking.istio.io=v1alpha3.networking.istio.io
FlowSchema=FlowSchema
条件=Condition
优先级名称=Priority Name
匹配优先级=Match Priority
区分器类型=Differentiator Type
未就绪=Not Ready
kube-scheduler=kube-scheduler
system-leader-election=system-leader-election
Differentiator type=Differentiator Type
Priority name=Priority Name
kube-controller-manager=kube-controller-manager
ByUser=ByUser
endpoint-controller=endpoint-controller
ByNamespace=ByNamespace
kube-system-service-accounts=kube-system-service-accounts
probes=Probes
service-accounts=ServiceAccounts
Match priority=Match Priority
condition=Condition
PriorityLevelConfiguration=PriorityLevelConfiguration
创建=Create
标签=Label
注解=Annotation
存在时长=Duration
并发权重=Concurrency Weight
选取数量=Pick Count
队列上限=Queue Max
队列数量=Queue Count
强制删除=Force Delete
属性文档=Doc
输入名称=Enter Name
Healthy:ok=Healthy:ok
scheduler=Scheduler
etcd-0=etcd-0
MCP管理=MCP Management
单点登录=SSO
参数设置=Params
集群巡检设置=ClusterInspection
指标显示翻转=MetricFlip
请选择=Please Select
命名空间=Namespace
可访问性=Accessibility
多集群管理=MultiClusterManagement
纳管集群=ManagedCluster
重新扫描=Rescan
集群地址=ClusterAddress
集群版本=ClusterVersion
输入集群名称=EnterClusterName
证书有效期=CertificateExpiry
授权=Authorization
文件=File
断开=Disconnect
连接=Connect
共4条=Total: 4
已连接=Connected
数据库=Database
未连接=Not Connected
AI配置=AI Conf
产品名称=Product Name
任意选择=AnySelect
内置参数=Built-in Parameter
适当提升有助于提升回答完整度=Proper Boosting Improves Answer Completeness
显示设置=Display
是否使用k8m内置AI大模型=Use Built-in k8m AI Model
配置管理=Config Management
集群配置=Cluster Config
是否开启任意选择，默认开启=Enable Any Option (Default)
设置产品显示名称=Set Product Display Name
资源缓存时间=Resource Cache Time
自动对话轮数=Auto Conversation Rounds
上下文记忆=Context Memory
配置加载顺序 启动参数->环境变量->数据库参数设置（界面配置）=Config Load Order: Startup Param -> Env Var -> DB Param (UI)
节点Shell镜像=NodeShell Image
以日志级别为例，启动参数设置2，环境变量设置3，界面配置4，那么最终生效日志级别为4=Log Level Example: Startup Param=2, Env=3, UI=4, Final=4
AI功能开关=AI Switch
是否启用AI功能，默认开启=Enable AI (Default)
适当的记忆量有助于提升回答精度=Proper Memory Improves Accuracy
界面展示实时用量、指标、Pod元数据等资源的缓存时间（单位：秒），默认60秒。时间越短，界面变化越快，但是会增加k8s系统负担。=UI Cache Time for Real-time Usage, Metrics, Pod Metadata (seconds, default 60). Shorter = faster UI, higher K8s load.
镜像拉取超时时间=Image Pull Timeout
NodeShell 镜像。默认为 alpine:latest，必须包含nsenter命令=NodeShell Image (default: alpine:latest, must include nsenter)
Kubectl Shell镜像=KubectlShell Image
Kubectl Shell 镜像。默认为 bitnami/kubectl:latest，必须包含kubectl命令=KubectlShell Image (default: bitnami/kubectl:latest, must include kubectl)
submit=Submit
提交=Submit
默认模型=Default Model
巡检汇总=Inspection Summary
巡检规则=Inspection Rule
巡检计划=Inspection Plan
巡检记录=Inspection Record
webhook管理=Webhook Management
查 询=Query
加载中...=Loading...
汇总数据：=Summary Data:
全部集群=All Clusters
起始时间=Start Time
请选择日期=Select Date
总执行次数：=Total Executions:
总集群数：=Total Clusters:
暂无集群数据=No Cluster Data
状态=Status
集群=Cluster
开始时间=Started
结束时间=Ended
触发类型=TriggerType
计划ID=PlanID
错误数量=Errors
设置查询字段=Query
AI总结=AI Summary
success=Success
分组=Group
版本=Version
新建规则=Add Rule
规则名称=Rule Name
规则描述=Rule Description
规则编码=Rule Code
重置内置规则=Reset Built-in Rules
StatefulSet 合规性检查=StatefulSet Compliance
PVC 合规性检查=PVC Compliance
PersistentVolumeClaim 合规性检查=PVC Compliance
检测 PVC Pending/Lost 状态、容量小于 1Gi、无 StorageClass。=Check PVC Pending/Lost, <1Gi, no StorageClass.
系统规则=System Rule
Security ServiceAccount 默认账户使用检测=Security: Default ServiceAccount Usage Check
检测 PV 是否为 Released/Failed 状态，及容量小于 1Gi。=Check PV Released/Failed, <1Gi.
Security Pod 安全上下文检测=Security: Pod SecurityContext Check
PersistentVolume 合规性检查=PersistentVolume Compliance Check
检查 ValidatingWebhookConfiguration 的 webhook 指向的 Service 是否存在、是否有活跃 Pod、Pod 状态。=Check ValidatingWebhookConfiguration: Service exists, active Pod, Pod status.
StorageClass 合规性检查=StorageClass Compliance Check
检测副本数为0且有 FailedCreate 的 ReplicaFailure。=Check ReplicaFailure: replicas=0, FailedCreate.
ValidatingWebhookConfiguration 合规性检查=ValidatingWebhookConfiguration Compliance Check
检测 StorageClass 是否使用了已废弃的 provisioner，及是否存在多个默认 StorageClass。=Check StorageClass: deprecated provisioner, multiple default.
检测 StatefulSet 关联的 Service、StorageClass 是否存在及 Pod 状态。=Check StatefulSet: Service/StorageClass exists, Pod status.
检测 Pod 是否存在特权容器或缺少安全上下文。=Check Pod: privileged container or missing security context.
Security RoleBinding 通配符检测=Security: RoleBinding Wildcard Check
检测 RoleBinding 关联的 Role 是否包含通配符权限。=Check RoleBinding: Role has wildcard permission.
检测 default ServiceAccount 是否被 Pod 使用。=Check if default ServiceAccount used by Pod.
ReplicaSet 合规性检查=ReplicaSet Compliance Check
检查 PVC Pending 状态下的 ProvisioningFailed 事件。=Check PVC Pending: ProvisioningFailed event.
v1=v1
Pod=Pod
apps=apps
core=core
ServiceAccount=ServiceAccount
Rule encoding=Rule Code
The name of the rule=Rule Name
version=Version
PersistentVolume=PersistentVolume
admissionregistration.k8s.io=admissionregistration.k8s.io
grouping=Grouping
rbac.authorization.k8s.io=rbac.authorization.k8s.io
ReplicaSet=ReplicaSet
StorageClass=StorageClass
Rule description=Rule Description
ValidatingWebhookConfiguration=ValidatingWebhookConfiguration
PersistentVolumeClaim=PersistentVolumeClaim
Builtin_StorageClass_027=Builtin_StorageClass_027
storage.k8s.io=storage.k8s.io
StatefulSet=StatefulSet
Builtin_Security_RoleBinding_024=Builtin_Security_RoleBinding_024
RoleBinding=RoleBinding
消息模板=Template
签名校验=Signature
新建Webhook=New Webhook
目标URL=Target URL
AI模型配置=AI Model Config
思考链=Chain of Thought
模型名称=Model Name
API 地址=API URL
输入用户名=Enter Username
新建用户=Create User
用户管理=User Management
禁用=Disable
2FA状态=2FA Status
CRM开发组,bdd,c,d=CRM Dev Group, BDD, C, D
CRM开发组,普通=CRM Dev Group, General
User groups=User Groups
Username=Username
source=Source
新建用户  (ESC 关闭)=Add User (ESC Off)
请输入用户名=Please Enter Username
MCP服务器工具信息 - k8m=MCP Server Tool Info - k8m
参数=Parameter
名称=Name
通过YAML删除Kubernetes资源，等同于 'kubectl delete -f <yaml-file>' / Delete Kubernetes resources from YAML, equivalent to 'kubectl delete -f <yaml-file>'=Delete K8s resource by YAML (kubectl delete -f <yaml-file>)
设置节点为不可调度状态，等同于kubectl cordon <node> / Mark node as unschedulable, equivalent to kubectl cordon <node>=Cordon Node (kubectl cordon <node>)
通过集群、命名空间和名称获取Kubernetes资源详情 / Retrieve Kubernetes resource details by cluster, namespace, and name=Get K8s resource by cluster/namespace/name
清空节点上的Pod并防止新的Pod调度，等同于kubectl drain <node> / Drain all pods from node and prevent new scheduling, equivalent to kubectl drain <node>=Drain Node (kubectl drain <node>)
查询Deployment的HPA列表。对应kubectl命令: kubectl get hpa -n <namespace> | grep <deployment-name> / Query deployment HPA list. Equivalent kubectl command: kubectl get hpa -n <namespace> | grep <deployment-name>=Get HPA for Deployment (kubectl get hpa -n <namespace> | grep <deployment-name>)
删除Pod中的指定文件 (类似命令: kubectl exec <pod-name> -n <namespace> -c <container> -- rm <path>) / Delete file in pod=Delete file in Pod (kubectl exec ... rm <path>)
通过集群、命名空间和名称删除Kubernetes资源 / Delete Kubernetes resource by cluster, namespace, and name=Delete K8s resource by cluster/namespace/name
为Kubernetes资源添加或删除注解 / Add or remove annotations for Kubernetes resource=Add/Remove K8s resource annotation
通过YAML创建或更新Kubernetes资源，等同于 'kubectl apply -f <yaml-file>' / Apply Kubernetes resources from YAML, equivalent to 'kubectl apply -f <yaml-file>'=Apply K8s resource by YAML (kubectl apply -f <yaml-file>)
描述Pod容器组，(类似命令: kubectl describe pod -n <namespace> pod_name ) =Describe Pod (kubectl describe pod -n <namespace> <pod_name>)
是否启用=Enabled
发起人=Creator
工具名称=Tool Name
执行时间=Execution Time
执行结果=Execution Result
执行耗时=Execution Duration
错误信息=Error Message
MCP执行记录=MCP Execution Record
request error: failed to list items type of []: field label not supported: metadata.labels.app=Request Error: field label not supported: metadata.labels.app
新建指标  (ESC 关闭)=Create Metric (ESC Off)
请输入指标名称，包含即为命中。如Pressure、Unavailable等=Enter Metric Name (e.g. Pressure, Unavailable)
请输入指标的描述信息=Enter Metric Description
类型=Type
新建配置=Add Config
SSO配置管理=SSO Config
SSO（单点登录）配置用于设置外部认证服务，支持OIDC协议。启用后，用户可以通过外部认证服务登录系统。=SSO config for external auth (OIDC). After enabled, users can login via external auth.
回调地址=Callback
配置名称=Config Name
认证服务器=Auth Server
oidc=OIDC
type=Type
参数查看（ESC 关闭）=View Parameter (ESC Off)
http://IP地址:端口/auth/oidc/auth0/callback=http://IP:Port/auth/oidc/auth0/callback
请将下面的地址，填入认证服务器的回调地址中。=Fill the following address in the auth server callback.
请注意替换为可访问的IP（域名）、端口=Replace with accessible IP/domain/port
错误=Error
规则数=Rule Count
最后运行=Last Run
目标集群=Target Cluster
计划名称=Plan Name
新建巡检计划=Create Inspection Plan
Cron表达式=Cron Expression
ID=ID
webhook=Webhook
null=null
Cron expression=Cron Expression
Finally run=Last Run
The name of the plan=Plan Name
mistake=Error
The destination cluster=Target Cluster
Number of rules=Rule Count
查=Query
关闭=Close
专项巡检=Special Inspection
组名=Group Name
角色=Role
用户组管理=User Group Management
请选择角色=Select Role
新建用户组=Create User Group
普通=Normal
普通用户=Normal User
平台管理员=Platform Admin
MCP=MCP
工具=Tool
指南=Guide
添加服务器=Add Server
温馨提示：MCP服务器启用后，在大模型对话中，会自动注册使用。=Tip: After MCP server is enabled, it will auto-register in LLM dialog.
服务器名称=Server Name
服务器地址=Server Address
编辑=Edit
详情=Detail
MCP导航=MCP Navigation
启用=Enable
搜索=Search
描述=Description
重置=Reset
指标名称=Metric Name
新建指标=Create Metric
状态指标管理=Status Metric Management
输入描述=Enter Description
在Kubernetes资源的监控状态中，若指标类型（如DiskPressure、Unavailable等）的Status值为False，则代表该指标处于正常健康状态。例如：DiskPressure=False表示磁盘无压力，Unavailable=False表示服务可用。=If a K8s resource metric (e.g. DiskPressure, Unavailable) Status is False, it is healthy. E.g. DiskPressure=False means no disk pressure, Unavailable=False means service available.
应用规则：如果一个资源状态的类型，包含下表中的指标名称，则会翻转显示。=Rule: If a resource status type contains a metric name below, it is flipped.
输入指标名称=Enter Metric Name
开启=Enable
批量删除=Bulk Delete
每页显示=PerPage
Slow=Slow
Error=Error
Unavailable=Unavailable
Problem=Problem
The name of the metric=Metric Name
Pressure=Pressure
operate=Operate
enable=Enable
description=Description
Creation time=Creation Time
我的集群=My Cluster
开放MCP=Open MCP
来源=Source
2步验证=2FA
用户组=User Group
登录设置=Login Setting
绑定=Bind
共=Total
未启用=Not Enabled
平台管理员组=Platform Admin Group
修改密码=Change Password
k8m=k8m
请输入访问链接用途描述=Enter Purpose of Access Link
创建访问密钥=Create Access Key
密钥值=Key Value
API密钥=API Key
1. API密钥用于程序化访问平台，可用于自动化脚本或第三方工具集成。=1. API Key is for programmatic access, automation scripts, or 3rd-party tools.
API密钥使用说明：=API Key Usage Guide:
2. 密钥具有与当前用户相同的权限。=2. Key has same permissions as current user.
请输入密钥用途描述=Enter Key Purpose
创建API密钥=Create API Key
权限=Permission
授权人=Authorizer
用户名=Username
黑名单命名空间：=Blacklist Namespace:
置空表示不限制，如果填写了，那么用户将不能访问该命名空间。黑名单可否定白名单。黑名单权限最高。=Leave blank for no limit. If filled, user cannot access this namespace. Blacklist overrides whitelist. Blacklist has highest permission.
Exec权限：=Exec Permission:
白名单命名空间=Whitelist Namespace
授权时间=Authorization Time
授权类型=Authorization Type
集群名称=Cluster Name
集群权限=Cluster Permission
具有进入容器内，执行命令的权限=Has permission to exec in container
置空表示不限制，可访问该集群下所有的命名空间。如果填写了，那么用户就只能访问指定的命名空间了。=Leave blank for all namespaces. If filled, user can only access specified namespaces.
我已经获得集群授权情况。权限解释：=Cluster authorization obtained. Permission explanation:
仅可查看集群资源信息，无法进行修改操作。=View-only cluster resource info, cannot modify.
黑名单命名空间=Blacklist Namespace
集群管理员：=Cluster Admin:
可以管理和操作所有集群资源，包括创建、修改、删除、Exec等操作。=Can manage all cluster resources, including create, modify, delete, exec.
集群只读：=Cluster Read-Only:
白名单命名空间：=Whitelist Namespace:
授权类型：=Authorization Type:
可以为用户、用户组分别授权，当为用户组时，对组内所有用户生效操作。=Can grant to user or group. If group, applies to all users in group.
暂无数据=No Data
操作=Operate
使用方法=Usage
创建密钥=Create Key
创建时间=Create Time
密钥ID=Key ID
描述信息=Description
开放MCP服务=Open MCP Service
查看使用说明=View Usage Guide
删除=Delete
点击查看=Click to View
方式二：静态地址+Header=Method 2: Static Address + Header
访问方式=Access Method
在HTTP请求头中添加Header：=Add Header to HTTP Request
方式一: 动态地址=Method 1: Dynamic Address
示例配置（JSON）=Example Config (JSON)
取消=Cancel
确认=Confirm
关于=About
平台=Platform
go版本=Go Version
版本号=Version
编译器=Compiler
Git仓库=Git Repository
Git提交=Git Commit
Git标签=Git Tag
编译时间=Build Time
注解=annotation
存在时长=Duration
并发权重=Concurrency
选取数量=Pick a quantity
队列上限=Queue cap
队列数量=Number of queues
强制删除=Forced deletion
属性文档=Doc
输入名称=Enter a name
Healthy:ok=null
scheduler=null
etcd-0=null
MCP管理=MCP management
参数设置=Parameter settings
指标显示翻转=indicator flip
请选择=Please select
命名空间=Namespace
可访问性=Accessibility
多集群管理=Multi-cluster management
纳管集群=Manage clusters
重新扫描=Rescan
集群地址=The address of the cluster
集群版本=Cluster version
输入集群名称=Enter a name for the cluster
证书有效期=Certificate expiration date
授权=authorization
文件=file
断开=disconnection
连接=connect
共4条=A total of 4 articles
已连接=Connected
数据库=database
未连接=Not connected
AI配置=AI configuration
产品名称=Product name
任意选择=Take your pick
内置参数=Built-in parameters
适当提升有助于提升回答完整度=Appropriate boosting can help improve the completeness of your answers
显示设置=Display settings
是否使用k8m内置AI大模型=Whether to use k8m's built-in AI large model
配置管理=Configuration management
集群配置=Cluster configuration
是否开启任意选择，默认开启=Whether to enable any selection is enabled by default
设置产品显示名称=Set the product display name
资源缓存时间=Resource caching time
自动对话轮数=Number of rounds of automatic conversation
上下文记忆=Contextual memory
配置加载顺序 启动参数->环境变量->数据库参数设置（界面配置）=Configuring the Loading Order Startup Parameters - > Environment Variables - > Database Parameter Settings (UI Configuration)
节点Shell镜像=Node shell image
以日志级别为例，启动参数设置2，环境变量设置3，界面配置4，那么最终生效日志级别为4=For example, if you set the startup parameter 2, environment variable 3, and UI 4, the final effective log level is 4
AI功能开关=AI function switch
是否启用AI功能，默认开启=Whether to enable the AI feature is enabled by default
适当的记忆量有助于提升回答精度=The right amount of memory can help improve the accuracy of your answers
界面展示实时用量、指标、Pod元数据等资源的缓存时间（单位：秒），默认60秒。时间越短，界面变化越快，但是会增加k8s系统负担。=The page displays the cache time (unit: seconds) of resources such as real-time usage, metrics, and pod metadata, which is 60 seconds by default. The shorter the time, the faster the interface changes, but it will increase the burden on the K8S system.
镜像拉取超时时间=The timeout period for image pulling
NodeShell 镜像。默认为 alpine:latest，必须包含nsenter命令=NodeShell image. The default is alpine:latest, which must include the nsenter command
Kubectl Shell镜像=Kubectl shell image
Kubectl Shell 镜像。默认为 bitnami/kubectl:latest，必须包含kubectl命令=Kubectl shell image. The default value is bitnami/kubectl:latest, which must contain the kubectl command
submit=null
提交=submit
默认模型=Default model
巡检汇总=Inspection summary
巡检规则=Inspection rules
巡检计划=Inspection plan
巡检记录=Inspection records
webhook管理=Webhook management
查 询=Enquiries
加载中...=Loading...
汇总数据：=Aggregate data:
全部集群=All clusters
起始时间=Start time
请选择日期=Please select a date
总执行次数：=Total number of executions:
总集群数：=Total number of clusters:
暂无集群数据=There is no cluster data
Feishu Group=null
Feishu group, old group=null
状态=state
集群=cluster
开始时间=Start time
结束时间=End time
触发类型=Trigger type
计划ID=Plan ID
错误数量=Number of errors
设置查询字段=Set the query field
AI总结=AI Summary
success=null
分组=grouping
版本=version
新建规则=Create a new rule
规则名称=The name of the rule
规则描述=Rule description
规则编码=Rule encoding
重置内置规则=Reset built-in rules
StatefulSet 合规性检查=StatefulSet compliance checks
PVC 合规性检查=PVC compliance checks
PersistentVolumeClaim 合规性检查=PersistentVolumeClaim compliance checks
检测 PVC Pending/Lost 状态、容量小于 1Gi、无 StorageClass。=Detects PVC Pending/Lost status, capacity less than 1Gi, and no StorageClass.
系统规则=System rules
Security ServiceAccount 默认账户使用检测=Security ServiceAccount defaults to account usage detection
1/3 共：30 项=1/3 of total: 30 items
检测 PV 是否为 Released/Failed 状态，及容量小于 1Gi。=Check whether the PV is in the Released/Failed state and the capacity is less than 1Gi.
Security Pod 安全上下文检测=Security Pod Security Context Detection
PersistentVolume 合规性检查=PersistentVolume compliance checks
检查 ValidatingWebhookConfiguration 的 webhook 指向的 Service 是否存在、是否有活跃 Pod、Pod 状态。=Check whether the service pointed to by the webhook of the ValidatingWebhookConfiguration exists, whether there are active pods, and the pod status.
StorageClass 合规性检查=StorageClass compliance checks
检测副本数为0且有 FailedCreate 的 ReplicaFailure。=Detects a ReplicaFailure with 0 replicas and FailedCreate.
ValidatingWebhookConfiguration 合规性检查=ValidatingWebhookConfiguration compliance checks
检测 StorageClass 是否使用了已废弃的 provisioner，及是否存在多个默认 StorageClass。=Detect if a StorageClass uses a deprecated provisioner and if there are multiple default StorageClasses.
检测 StatefulSet 关联的 Service、StorageClass 是否存在及 Pod 状态。=Check whether the Service and StorageClass associated with the StatefulSet exist, and the pod status.
检测 Pod 是否存在特权容器或缺少安全上下文。=Detect if a pod has a privileged container or is missing a security context.
Security RoleBinding 通配符检测=Security RoleBinding wildcard detection
检测 RoleBinding 关联的 Role 是否包含通配符权限。=Detect whether the Role associated with RoleBinding contains wildcard permissions.
检测 default ServiceAccount 是否被 Pod 使用。=Detect if the default ServiceAccount is being used by a pod.
ReplicaSet 合规性检查=ReplicaSet compliance checks
检查 PVC Pending 状态下的 ProvisioningFailed 事件。=Check for the ProvisioningFailed event in the PVC Pending state.
v1=v1
Pod=Pod
apps=apps
core=null
ServiceAccount=null
Rule encoding=null
The name of the rule=null
version=version
PersistentVolume=null
admissionregistration.k8s.io=admissionregistration.k8s.io
grouping=null
rbac.authorization.k8s.io=rbac.authorization.k8s.io
ReplicaSet=ReplicaSet
StorageClass=null
Rule description=null
ValidatingWebhookConfiguration=null
PersistentVolumeClaim=null
storage.k8s.io=storage.k8s.io
Builtin_StatefulSet_026=null
StatefulSet=StatefulSet
Builtin_Security_RoleBinding_024=null
RoleBinding=null
Builtin_Security_SA_023=null
Builtin_PVC_021=null
消息模板=Message templates
签名校验=Signature verification
新建Webhook=Create a webhook
目标URL=Destination URL
AI模型配置=AI model configuration
思考链=Chain of thought
模型名称=The name of the model
API 地址=API address
输入用户名=Enter a username
新建用户=Create a new user
用户管理=User management
禁用=Disable
2FA状态=MFA status
CRM开发组,bdd,c,d=CRM Development Group, BDD, C, D
CRM开发组,普通=CRM Development Group, General
新建用户  (ESC 关闭)=New User (ESC Off)
请输入用户名=Please enter a username
MCP服务器工具信息 - k8m=MCP Server Tool Information - k8m
参数=parameter
名称=name
通过YAML删除Kubernetes资源，等同于 'kubectl delete -f <yaml-file>' / Delete Kubernetes resources from YAML, equivalent to 'kubectl delete -f <yaml-file>'=<yaml-file>Deleting Kubernetes resources from YAML is equivalent to 'kubectl delete -f <yaml-file>'
设置节点为不可调度状态，等同于kubectl cordon <node> / Mark node as unschedulable, equivalent to kubectl cordon <node>=<node> Mark node as unschedulable, equivalent to kubectl cordon <node>
通过集群、命名空间和名称获取Kubernetes资源详情 / Retrieve Kubernetes resource details by cluster, namespace, and name=Retrieve Kubernetes resource details by cluster, namespace, and name
清空节点上的Pod并防止新的Pod调度，等同于kubectl drain <node> / Drain all pods from node and prevent new scheduling, equivalent to kubectl drain <node>=<node> Drain all pods from node and prevent new scheduling, equivalent to kubectl drain <node>
查询Deployment的HPA列表。对应kubectl命令: kubectl get hpa -n <namespace> | grep <deployment-name> / Query deployment HPA list. Equivalent kubectl command: kubectl get hpa -n <namespace> | grep <deployment-name>=Query the HPA list of the deployment. Corresponding kubectl command: kubectl get hpa -n <namespace> | grep <deployment-name> / Query deployment HPA list. Equivalent kubectl command: kubectl get hpa -n <namespace> | grep <deployment-name>
删除Pod中的指定文件 (类似命令: kubectl exec <pod-name> -n <namespace> -c <container> -- rm <path>) / Delete file in pod=Delete file in pod (similar command: kubectl exec <pod-name> -n <namespace> -c <container> -- rm) <path>/ Delete file in pod
通过集群、命名空间和名称删除Kubernetes资源 / Delete Kubernetes resource by cluster, namespace, and name=Delete Kubernetes resource by cluster, namespace, and name
为Kubernetes资源添加或删除注解 / Add or remove annotations for Kubernetes resource=Add or remove annotations for Kubernetes resource
通过YAML创建或更新Kubernetes资源，等同于 'kubectl apply -f <yaml-file>' / Apply Kubernetes resources from YAML, equivalent to 'kubectl apply -f <yaml-file>'=<yaml-file>Kubernetes resources from YAML, equivalent to 'kubectl apply -f <yaml-file>'
描述Pod容器组，(类似命令: kubectl describe pod -n <namespace> pod_name ) =Describe pod container group, (similar command: kubectl describe pod -n <namespace> pod_name ) 
是否启用=Enabled
发起人=Creator
工具名称=Tool Name
执行时间=Execution Time
执行结果=Execution Result
执行耗时=Execution Duration
错误信息=Error Message
MCP执行记录=MCP Execution Record
request error: failed to list items type of []: field label not supported: metadata.labels.app=null
新建指标  (ESC 关闭)=New Indicator (ESC Off)
请输入指标名称，包含即为命中。如Pressure、Unavailable等=Please enter the name of the indicator, including it is a hit. For example, Pressure, Unavailable, etc
请输入指标的描述信息=Enter a description of the indicator
错误=Error
规则数=Number of rules
最后运行=Finally run
目标集群=The destination cluster
计划名称=The name of the plan
新建巡检计划=Create an inspection plan
Cron表达式=Cron expression
ID=null
webhook=null
null=null
Cron expression=null
Finally run=null
The name of the plan=null
mistake=null
The destination cluster=null
Number of rules=null
查=examine
关闭=Shut down
专项巡检=special inspection
组名=Group name
角色=role
用户组管理=User group management
请选择角色=Please select a role
新建用户组=Create a user group
普通=ordinary
普通用户=Regular users
平台管理员=Platform Administrator
root=null
MCP=null
工具=tool
指南=guide
添加服务器=Add a server
温馨提示：MCP服务器启用后，在大模型对话中，会自动注册使用。=Tips: After the MCP server is enabled, it will be automatically registered for use in the large model dialogue.
服务器名称=The name of the server
服务器地址=Server address
编辑=edit
详情=detail
MCP导航=MCP navigation
启用=enable
搜索=Search
描述=description
重置=reset
指标名称=The name of the metric
新建指标=Create a new metric
状态指标管理=Status metrics management
输入描述=Enter a description
在Kubernetes资源的监控状态中，若指标类型（如DiskPressure、Unavailable等）的Status值为False，则代表该指标处于正常健康状态。例如：DiskPressure=False表示磁盘无压力，Unavailable=False表示服务可用。=If the Status value of a metric type (such as DiskPressure or Unavailable) is False in the monitoring status of a Kubernetes resource, the metric is in a healthy state. For example, DiskPressure=False indicates that the disk is under no pressure, and Unavailable=False indicates that the service is available.
应用规则：如果一个资源状态的类型，包含下表中的指标名称，则会翻转显示。=Apply rule: If the type of a resource status contains the metric name in the following table, it is flipped over.
输入指标名称=Enter a name for the indicator
开启=Open
批量删除=BulkDelete
每页显示=Displayed on each page
Slow=null
Error=null
Unavailable=null
Problem=null
The name of the metric=null
Pressure=null
operate=operate
enable=null
description=null
Creation time=null
我的集群=My cluster
开放MCP=Open MCP
来源=source
2步验证=MFA Verification
用户组=User groups
登录设置=Sign-in settings
绑定=bind
共1条=A total of 1
未启用= Not enabled
平台管理员组=Platform Administrators group
修改密码=Change your password
k8m=k8m
请输入访问链接用途描述=Please enter a description of the purpose of the access link
创建访问密钥=Create an access key
密钥值=The value of the key
API密钥=API key
1. API密钥用于程序化访问平台，可用于自动化脚本或第三方工具集成。=1. The API key is used for programmatic access to the platform and can be used for automation scripts or third-party tool integrations.
API密钥使用说明：=API Key Usage Instructions:
2. 密钥具有与当前用户相同的权限。=2. The key has the same permissions as the current user.
请输入密钥用途描述=Please enter a description of the purpose of the key
创建API密钥=Create an API key
权限=Permissions
授权人=Authorizer
用户名=Username
黑名单命名空间：=Blacklist namespace:
置空表示不限制，如果填写了，那么用户将不能访问该命名空间。黑名单可否定白名单。黑名单权限最高。=If you fill this in, users will not be able to access the namespace. The blacklist negates the whitelist. The blacklist has the highest permissions.
Exec权限：=Exec Permissions:
白名单命名空间=Whitelist namespace
授权时间=Authorization time
授权类型=Authorization Type
集群名称=The name of the cluster
集群权限=Cluster permissions
具有进入容器内，执行命令的权限=It has the permission to enter the container and execute commands
置空表示不限制，可访问该集群下所有的命名空间。如果填写了，那么用户就只能访问指定的命名空间了。=Empty indicates that all namespaces in the cluster can be accessed without restrictions. If so, the user will only be able to access the specified namespace.
我已经获得集群授权情况。权限解释：=I've been granted a cluster license. Permissions explained:
仅可查看集群资源信息，无法进行修改操作。=You can view only the cluster resource information and cannot modify it.
黑名单命名空间=Blacklist namespace
集群管理员：=Cluster Administrator:
可以管理和操作所有集群资源，包括创建、修改、删除、Exec等操作。=You can manage and operate all cluster resources, including create, modify, delete, and Exec.
集群只读：=Cluster read-only:
白名单命名空间：=Whitelist namespace:
授权类型：=Authorization Type:
可以为用户、用户组分别授权，当为用户组时，对组内所有用户生效操作。=You can grant permissions to users and user groups separately, and if they are user groups, the actions take effect on all users in the group.
暂无数据=No data yet
操作=operate
使用方法=How to
创建密钥=Create a key
创建时间=Creation time
密钥ID=Key ID
描述信息=Descriptive information
开放MCP服务=Open the MCP service
查看使用说明=See instructions for use
删除=Delete
点击查看=View
方式二：静态地址+Header=Method 2: Static address + Header
访问方式=Access
在HTTP请求头中添加Header：=Add a header to the HTTP request header:
方式一: 动态地址=Method 1: Dynamic address
示例配置（JSON）=Example(JSON)
取消=Cancel
确认=Confirm
关于=About
平台=Platform
go版本=Go Version
版本号=Version
编译器=Compiler
Git仓库=Git Repository
Git提交=Git Commit
Git标签=Git Tags
编译时间=Compilation Time
`;

export default enTranslation;
